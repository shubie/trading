// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: candlestick.proto

package candlestick

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CandlestickService_StreamCandlesticks_FullMethodName = "/candlestick.CandlestickService/StreamCandlesticks"
)

// CandlestickServiceClient is the client API for CandlestickService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CandlestickServiceClient interface {
	StreamCandlesticks(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Candlestick], error)
}

type candlestickServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCandlestickServiceClient(cc grpc.ClientConnInterface) CandlestickServiceClient {
	return &candlestickServiceClient{cc}
}

func (c *candlestickServiceClient) StreamCandlesticks(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Candlestick], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CandlestickService_ServiceDesc.Streams[0], CandlestickService_StreamCandlesticks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, Candlestick]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CandlestickService_StreamCandlesticksClient = grpc.ServerStreamingClient[Candlestick]

// CandlestickServiceServer is the server API for CandlestickService service.
// All implementations must embed UnimplementedCandlestickServiceServer
// for forward compatibility.
type CandlestickServiceServer interface {
	StreamCandlesticks(*StreamRequest, grpc.ServerStreamingServer[Candlestick]) error
	mustEmbedUnimplementedCandlestickServiceServer()
}

// UnimplementedCandlestickServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCandlestickServiceServer struct{}

func (UnimplementedCandlestickServiceServer) StreamCandlesticks(*StreamRequest, grpc.ServerStreamingServer[Candlestick]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCandlesticks not implemented")
}
func (UnimplementedCandlestickServiceServer) mustEmbedUnimplementedCandlestickServiceServer() {}
func (UnimplementedCandlestickServiceServer) testEmbeddedByValue()                            {}

// UnsafeCandlestickServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CandlestickServiceServer will
// result in compilation errors.
type UnsafeCandlestickServiceServer interface {
	mustEmbedUnimplementedCandlestickServiceServer()
}

func RegisterCandlestickServiceServer(s grpc.ServiceRegistrar, srv CandlestickServiceServer) {
	// If the following call pancis, it indicates UnimplementedCandlestickServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CandlestickService_ServiceDesc, srv)
}

func _CandlestickService_StreamCandlesticks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CandlestickServiceServer).StreamCandlesticks(m, &grpc.GenericServerStream[StreamRequest, Candlestick]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CandlestickService_StreamCandlesticksServer = grpc.ServerStreamingServer[Candlestick]

// CandlestickService_ServiceDesc is the grpc.ServiceDesc for CandlestickService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CandlestickService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "candlestick.CandlestickService",
	HandlerType: (*CandlestickServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCandlesticks",
			Handler:       _CandlestickService_StreamCandlesticks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "candlestick.proto",
}

const (
	HealthCheckService_Health_FullMethodName = "/candlestick.HealthCheckService/Health"
)

// HealthCheckServiceClient is the client API for HealthCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckServiceClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type healthCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckServiceClient(cc grpc.ClientConnInterface) HealthCheckServiceClient {
	return &healthCheckServiceClient{cc}
}

func (c *healthCheckServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, HealthCheckService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServiceServer is the server API for HealthCheckService service.
// All implementations must embed UnimplementedHealthCheckServiceServer
// for forward compatibility.
type HealthCheckServiceServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedHealthCheckServiceServer()
}

// UnimplementedHealthCheckServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthCheckServiceServer struct{}

func (UnimplementedHealthCheckServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedHealthCheckServiceServer) mustEmbedUnimplementedHealthCheckServiceServer() {}
func (UnimplementedHealthCheckServiceServer) testEmbeddedByValue()                            {}

// UnsafeHealthCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServiceServer will
// result in compilation errors.
type UnsafeHealthCheckServiceServer interface {
	mustEmbedUnimplementedHealthCheckServiceServer()
}

func RegisterHealthCheckServiceServer(s grpc.ServiceRegistrar, srv HealthCheckServiceServer) {
	// If the following call pancis, it indicates UnimplementedHealthCheckServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthCheckService_ServiceDesc, srv)
}

func _HealthCheckService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheckService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheckService_ServiceDesc is the grpc.ServiceDesc for HealthCheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "candlestick.HealthCheckService",
	HandlerType: (*HealthCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _HealthCheckService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "candlestick.proto",
}
